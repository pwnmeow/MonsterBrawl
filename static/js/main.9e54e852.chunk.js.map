{"version":3,"sources":["components/card/card.component.jsx","components/cardlist/cardlist.component.jsx","components/searchBox/searchBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","key","name","Cardlist","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchfield","fetch","then","response","json","users","setState","this","filterdMonsters","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2UAEaA,G,kBAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,wBAAIC,IAAKN,EAAMI,QAAQC,IAAML,EAAMI,QAAQG,SCDtCC,EAAW,SAACR,GACrB,OAAO,yBAAKC,UAAU,aAEdD,EAAMS,SAASC,IAAI,SAAAN,GAAO,OAC1B,kBAAC,EAAD,CAAMA,QAASA,QCLdO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAcC,EAAhB,EAAgBA,aAAhB,OACrB,2BACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCuBCG,E,YA1Bb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXR,SAAS,GACTS,YAAa,IAJJ,E,iFAOO,IAAD,OACjBC,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAI,EAAKC,SAAU,CAAEf,SAAUc,Q,+BAGnC,IAAD,SAC0BE,KAAKR,MAA9BR,EADD,EACCA,SAAUS,EADX,EACWA,YACXQ,EAAkBjB,EAASkB,OAAO,SAAAvB,GAAO,OAAIA,EAAQG,KAAKqB,cAAcC,SAASX,EAAYU,iBACnG,OACA,yBAAK3B,UAAU,OACb,8CACA,kBAAC,EAAD,CAAYW,YAAY,kBAAkBC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAYY,EAAEC,OAAOC,WACjG,kBAAC,EAAD,CAAUvB,SAAUiB,S,GArBRO,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC,iB","file":"static/js/main.9e54e852.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\nexport const Card = props => ( \r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x200`}/>\r\n        <h2 key={props.monster.id}>{ props.monster.name }</h2>\r\n    </div>\r\n);","import React from 'react';\r\nimport './cardlist.styles.css';\r\nimport { Card } from '../card/card.component.jsx';\r\n\r\nexport const Cardlist = (props) => {\r\n    return <div className='card-list'>\r\n        {\r\n            props.monsters.map(monster => ( \r\n            <Card monster={monster}/>\r\n            //<h1 key={monster.id}> {monster.name} </h1>\r\n        ))}\r\n    </div>\r\n}","import React from 'react';\r\nimport './searchBox.styles.css';\r\n\r\nexport const SearchBox = ({placeholder , handleChange}) => (\r\n    <input \r\n    className=\"search\"\r\n    type=\"search\" \r\n    placeholder={placeholder} \r\n    onChange={handleChange}/>\r\n    //onChange={e => this.setState({searchfield:e.target.value})}/>\r\n)\r\n ","import React,{Component} from 'react';\nimport './App.css';\nimport { Cardlist } from '../src/components/cardlist/cardlist.component';\nimport { SearchBox } from '../src/components/searchBox/searchBox.component';\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = { \n      monsters:[],\n      searchfield: ''\n  }}\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState( { monsters: users }))\n  }\n  \n  render(){\n    const {monsters, searchfield} = this.state;\n    const filterdMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchfield.toLowerCase()))\n    return(\n    <div className=\"App\">\n      <h1>Monsters Brawl</h1>\n      <SearchBox  placeholder='search monsters' handleChange={e => this.setState({searchfield:e.target.value})}/>\n      <Cardlist monsters={filterdMonsters}></Cardlist>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}